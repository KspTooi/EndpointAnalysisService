package ${pkgNameService};

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import com.baomidou.mybatisplus.extension.service.IService;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import static com.ksptooi.commons.utils.entities.Entities.*;

import ${pkgNamePo}.${classNamePo};
import ${pkgNameMapper}.${classNameMapper};
import ${pkgNameVo}.${businessClassName}PageVo;
import ${pkgNameDto}.${businessClassName}PageDto;
import ${pkgNameVo}.${businessClassName}DetailsVo;
import ${pkgNameDto}.Edit${classNameDto};
import ${pkgNameDto}.Add${classNameDto};

/**
* ${comments}服务
*
* @author ${author}
* @date ${datetime}
*/

@Service
public class ${classNameService}  extends ServiceImpl<${classNameMapper}, ${classNamePo}> implements IService<${classNamePo}> {

    @Autowired
    private ${classNameMapper} ${fieldNameMapper};


    public IPage<${businessClassName}PageVo> get${businessClassName}Page(${businessClassName}PageDto dto){
    IPage<${businessClassName}PageVo> page = new Page<>(dto.getPage(), dto.getPageSize());
        ${fieldNameMapper}.get${businessClassName}Page(page,as(dto,${classNamePo}.class));
        return page;
    }


    public Boolean add${businessClassName}(Add${classNameDto} dto){
        var insert = new ${classNamePo}("insert");
        assign(dto,insert);
        return ${fieldNameMapper}.insert(insert) > 0;
    }


    public Boolean edit${businessClassName}(Edit${classNameDto} dto) {
        var update = new ${classNamePo}("update");
        assign(dto,update);
        return ${fieldNameMapper}.updateById(update) > 0;
    }


    public ${businessClassName}DetailsVo get${businessClassName}Details(Long id) {
        var po = ${fieldNameMapper}.getById(id);
        return as(po,${businessClassName}DetailsVo.class);
    }


    public Boolean remove${businessClassName}(Long id) {
        return ${fieldNameMapper}.removeById(id) > 0;
    }


    public Boolean remove${businessClassName}(List<Long> ids) {
        return ${fieldNameMapper}.removeByIds(ids) > 0;
    }


    public Long count(${businessClassName}PageDto dto){
        return ${fieldNameMapper}.count(as(dto,${classNamePo}.class));
    }

}