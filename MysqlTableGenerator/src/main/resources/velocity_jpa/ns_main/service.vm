package ${pkgNameService};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;
import com.odisp.commons.utils.web.PageableResult;
import static com.odisp.commons.utils.entities.Entities.as;
import static com.odisp.commons.utils.entities.Entities.assign;
import com.odisp.commons.utils.web.CommonIdDto;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Page;
import com.odisp.commons.exception.BizException;
import java.util.Optional;

import ${pkgNameRepository}.${businessClassName}Repository;
import ${pkgNamePo}.${classNamePo};
import ${pkgNameVo}.Get${businessClassName}ListVo;
import ${pkgNameDto}.Get${businessClassName}ListDto;
import ${pkgNameVo}.Get${businessClassName}DetailsVo;
import ${pkgNameDto}.Edit${classNameDto};
import ${pkgNameDto}.Add${classNameDto};

@Service
public class ${classNameService} {

    @Autowired
    private ${businessClassName}Repository repository;

    public PageableResult<Get${businessClassName}ListVo> get${businessClassName}List(Get${businessClassName}ListDto dto){
        ${classNamePo} query = new ${classNamePo}();
        assign(dto,query);

        Page<${classNamePo}> page = repository.get${businessClassName}List(query, PageRequest.of(dto.getPageNum() - 1, dto.getPageSize()));
        if (page.isEmpty()) {
            return PageableResult.successWithEmpty();
        }

        List<Get${businessClassName}ListVo> vos = as(page.getContent(), Get${businessClassName}ListVo.class);
        return PageableResult.success(vos, (int)page.getTotalElements());
    }



    @Transactional
    public void add${businessClassName}(Add${classNameDto} dto){
        ${classNamePo} po = as(dto,${classNamePo}.class);
        repository.save(po);
    }

    @Transactional
    public void edit${businessClassName}(Edit${classNameDto} dto) throws BizException {
        ${classNamePo} byId = repository.findById(dto.getId())
        .orElseThrow(()-> new BizException("更新失败,数据不存在."));

        assign(dto,byId);
        repository.save(byId);
    }

    public Get${businessClassName}DetailsVo get${businessClassName}Details(CommonIdDto dto) throws BizException {
        ${classNamePo} po = repository.findById(dto.getId()).orElseThrow(()-> new BizException("数据不存在"));
        return as(po,Get${businessClassName}DetailsVo.class);
    }

    @Transactional
    public void remove${businessClassName}(CommonIdDto dto) throws BizException {
        if (dto.isBatch()) {
           repository.deleteAllById(dto.getIds());
        } else {
           repository.deleteById(dto.getId());
        }
    }

}
